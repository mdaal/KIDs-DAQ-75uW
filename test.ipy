if 0:
	import numpy as np
	import Instruments
	reload(Instruments)
	na = Instruments.network_analyzer('TCPIP0::169.229.225.4::inst0::INSTR')
	#psu = Instruments.power_supply('GPIB0::14::INSTR')
	#syn =  Instruments.synthesizer('GPIB0::7::INSTR')
	#ADC = Instruments.fridge_ADC('GPIB1::14::INSTR')
	#DAC = Instruments.fridge_DAC('GPIB1::17::INSTR')
	cw_freq_Hz = 717e6
	start_power_dBm = -50
	stop_power_dBm = -10
	na.set_sweep_type(sweep_type  = 'POW')
	na.set_CW_freq( cw_freq_Hz)
	na.set_start_power(start_power_dBm, channel = 1)
	na.set_stop_power(stop_power_dBm, channel = 1)
	na.set_num_points_per_scan(300)
	na.setup_single_scan_mode()
	na.trigger_single_scan()
	na.inst.write(':FORM:DATA REAL;')
	pows = na.inst.query_binary_values(':CALC1:TRACE1:DATA:POW?;', datatype='d', is_big_endian=True, container = np.array)
	#s21 = na.inst.query_binary_values(':CALC1:TRACE1:DATA:FDAT?;', datatype='d', is_big_endian=True, container = np.array)
if 0:
	import fractions 
	import numpy as np
	min_number_of_na_scan_pts = 100.
	max_na_points_per_scan =  1601.

	#def find_num_points_per_na_scan(min_num_scan_pts_req, min_number_of_na_scan_pts):
	def round_up(x):
		return int(np.ceil(x/min_number_of_na_scan_pts)) * min_number_of_na_scan_pts

	def round_down(x):
		return int(np.floor(x/min_number_of_na_scan_pts)) * min_number_of_na_scan_pts


if 0: 
	import contextlib

	@contextlib.contextmanager
	def A(idx,func):
		print 'entering A'
		for ai in xrange(idx):
			myprint('loop A',ai)
		print 'exiting A'

	@contextlib.contextmanager
	def B(idx,func):
		print 'entering B'
		for bi in xrange(idx):
			myprint('loop B',bi)
		print 'exiting B'


	def my_print(px = None, pl = None, ax = None, al=  None):
		print 'Pindex: {}, Pvalue {}, Aindex {}, Avalue {}'.format( px, pl, ax, al)

	@contextlib.contextmanager
	def nacontex(x):
		print('set up na', x)
		na = 'thi is na'
		try:
			print('before yield')
			yield na, x # passes these two as  targets in the 'with nacontex(2) as n:' statement.  n is a tuple: n[0] is na and n[1] is x
			print('after yield')
		finally:
	 		print('take down na')

	with nacontex(3) as n:
	    print(n[0] , ' and ', n[1])
	   

	with nacontex(2) as n:
	    print(n[0] , ' and ', n[1])
	    1/0
    

	# def loop1(funct, Plist):
	# 	def fu(**k):
	# 		for i in xrange(len(Plist)):
	# 			funct(px = i, pl = Plist[i], **k )
	# 	return fu

	# def loop2(funct, Alist):
	# 	def fu2(**l):
	# 		for a in xrange(len(Alist)):
	# 			funct(ax = a ,al = Alist[a], **l )
	# 	return fu2

	def loop1(funct, Plist):
		def fu(**k):
			print('entering loop 1')
			_i = 0
			for i in Plist:
				funct(px = _i, pl = i, **k )
				_i = _i +1
			print('exiting loop 1')
		return fu

	def loop2(funct, Alist):
		def fu2(**l):
			print('entering loop 2')
			_a = 0
			for a in Alist:
				funct(ax = _a ,al = a, **l )
				_a = _a + 1
			print('exiting loop 2')
		return fu2

	#*****************
	PP = [35, 2]
	AA = [5, 20]

	
	def loop11(funct):
		def fu(**kwd):
			print('entering loop 1')
			_i = 0
			for i in PP:
				funct(px = _i, pl = i, **kwd )
				_i = _i +1
			print('exiting loop 1')
		return fu

	def loop22(funct):
		def fu2(**kwd):
			print('entering loop 2')
			_a = 0
			for a in AA:
				funct(ax = _a ,al = a, **kwd )
				_a = _a + 1
			print('exiting loop 2')
		return fu2
	#*****************

if 1:
	import Measurement_Managers
	reload(Measurement_Managers)
	import KAM
	reload(KAM)
	import Instruments
	reload(Instruments)
	import Fridge_Interfaces
	reload(Fridge_Interfaces)
	devices = [('RuOx2','MF2'), ('Ge3', 'MF1'),('Ge4', 'MF3'), ('Stack_Heater_1','Stack_Heater'), ('Helmholtz_Coil', 'Aux')]
	mm = Measurement_Managers.measurement_manager(devices, 'Run53ab')
	import Data_Inspection
	reload(Data_Inspection)
	di  = Data_Inspection.data_inspector('Run53ab')
	mm.execute_sweep('A_Sweep4.txt', 'Run_53ab_Data.h5')
	
	#mm.execute_sweep('Sweep_Test.txt', 'Run_53ab_Data_Test.h5')
	
	# di.load_hf5('Run_53ab_Data_Test.h5','/SweepN/T201603092312_SweepN')
	# di.plot_noise(Plot_Off_Res = True)
	# mm.pulse_stack_heater_voltage(9, 75, return_voltage = None)
	# with mm._na_ctx():
	# 	 mm._perform_na_power_scan_calibration()

if 0:
	import Instruments
	reload(Instruments)
	import Fridge_Interfaces
	reload(Fridge_Interfaces)

	#fi = Fridge_Interfaces.fridge_interface([('U03746','MF2'), ('U30593', 'MF1'),('U30817', 'MF3')])
	fi = Fridge_Interfaces.fridge_interface([('RuOx2','MF2'), ('Ge3', 'MF1'),('Ge4', 'MF3'), ('Stack_Heater_1','Stack_Heater'), ('Helmholtz_Coil', 'Aux')])
	
if 0:
	import visa
	import numpy as np
	rm = visa.ResourceManager()
	ADC  = rm.open_resource('GPIB1::14::INSTR', open_timeout=0)
	ADC.chunk_size = 2**15 
	ADC.values_format.is_binary = True 
	ADC.values_format.is_big_endian = True 
	ADC.values_format.container = np.array
	num_readings = 50
	def ADC_Acq(num_readings):
		ADC.write('B-OX')
		ADC.clear()
		ADC.write('A0C5R0I0N0,{}L0T1G9X'.format(num_readings))
		ADC.assert_trigger()
		ADC.write('B-OX')
		#ADC.wait_for_srq()

	# def parse_binary(bytes_data, is_big_endian=False, is_single=False):
	#     """Parse ascii data and return an iterable of numbers.
	#     To be deprecated in 1.7
	#     :param bytes_data: data to be parsed.
	#     :param is_big_endian: boolean indicating the endianness.
	#     :param is_single: boolean indicating the type (if not is double)
	#     :return:
	#     """
	#     data = bytes_data

	#     hash_sign_position = bytes_data.find(b"#")
	#     if hash_sign_position == -1:
	#         raise ValueError('Could not find valid hash position')

	#     if hash_sign_position > 0:
	#         data = data[hash_sign_position:]

	#     data_1 = data[1:2].decode('ascii')

	#     if data_1.isdigit() and int(data_1) > 0:
	#         number_of_digits = int(data_1)
	#         # I store data and data_length in two separate variables in case
	#         # that data is too short.  FixMe: Maybe I should raise an error if
	#         # it's too long and the trailing part is not just CR/LF.
	#         data_length = int(data[2:2 + number_of_digits])
	#         data = data[2 + number_of_digits:2 + number_of_digits + data_length]
	#     else:
	#         data = data[2:]
	#         if data[-1:].decode('ascii') == "\n":
	#             data = data[:-1]
	#         data_length = len(data)

	#     if is_big_endian:
	#         endianess = ">"
	#     else:
	#         endianess = "<"

	#     try:
	#         if is_single:
	#             fmt = endianess + str(data_length // 4) + 'f'
	#         else:
	#             fmt = endianess + str(data_length // 8) + 'd'

	#         result = list(struct.unpack(fmt, data))
	#     except struct.error:
	#         raise ValueError("Binary data itself was malformed")

	#     return result


